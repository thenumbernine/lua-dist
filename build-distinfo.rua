#!/usr/bin/env rua
--[[
1) look at git repo + look at pwd for name
2) build `files = { }` mapping all files in repo to dirname + filename
3) for each lua file, search for all "require" instances
4) add a "deps" section for dependencies
5) hmm those two were automatic, but the rest might be manual ... specifying any dependent binaries (or maybe they should be packaged / repo-committed per-OS-arch)
--]]
local LuaParser = require 'parser.lua.parser'
local LuaFixedParser = require 'langfix.parser'

local out = table()

out:insert'--------------------------------------------'
out:insert'-- generated with dist/build-distinfo.rua --'
out:insert'--------------------------------------------'
out:insert''

local dirname = path:cwd().path:split'/':last()
out:insert('name = '..tolua(dirname))

local files = io.readproc'git ls-files':trim():split'\n'
out:insert'files = {'
for _,f in ipairs(files) do
	out:insert('\t['..tolua(f)..'] = '..tolua(dirname..'/'..f)..',')
end
out:insert'}'

local builtinReqs = {
	ffi = true,
	jit = true,
	coroutine = true,
	debug = true,
	io = true,
	math = true,
	os = true,
	string = true,
	table = true,
	utf8 = true,
}
local deps = {}

local search
search = [x] do
	for k,v in pairs(x) do
		if type(v) == 'table'
		and k ~= 'parent'	-- TODO need a list of child keys
		and k ~= 'parser'
		then
			if v.type == 'call'
			and v.func.type == 'var'
			and v.func.name == 'require'
			and v.args[1].type == 'string'
			then
				-- TODO maybe if the require is inside a `pcall(require, somewhere)` then mark it as optional...
				local req = v.args[1].value
				if not builtinReqs[req] then
--DEBUG:print('searching for require', req)
					-- now here compare 'req' to our search path
					-- even try to find a file
					-- then go to its dir and look for a distinfo
					-- ...
					-- or just take the first part here and use that as the dep
					--deps[req:split'%.'[1]] = true
					-- or search:
					local filename, msg = package.searchpath(req, package.path)
					if not filename then
						io.stderr:write("WARNING require couldn't find path "..tolua(req)..": "..tolua(msg)..'\n')
					else
						local dir = path(filename):abs()
--DEBUG:print('searching filename for distinfo', filename, dir)
						repeat
							dir = dir:getdir()
--DEBUG:print('...checking dir', dir, 'vs cwd', path:cwd(), dir == path:cwd())
							local distpath = dir/'distinfo'
							if distpath:exists() then
								if dir ~= path:cwd() then	-- ofc we depend on ourselves
									-- a) read the name from it
									-- b) just assume its dir is the right dir
									local _, name = dir:getdir()
									deps[name.path] = true
								end
								break
							end
						until dir.path == '/'
						if dir.path == '/' then
							io.stderr:write("WARNING unable to find distinfo for require "..tolua(req).." file "..tolua(filename)..'\n')
						end
					end
				end
			end
			search(v)
		end
	end
end

for _,f in ipairs(files) do
	if f:match'%.lua$' then
		-- parse it, look for 'require' function calls
		local data = assert(path(f):read())
		local parser = LuaParser()
		local success, msg = parser:setData(data, source)
		if not success then
			io.stderr:write('WARNING - failed to parse '..f..': '..msg..'\n')
		else
			local tree = parser.tree
			search(tree)
		end
	elseif f:match'%.rua$' then
		-- parse it, look for 'require' function calls
		local data = assert(path(f):read())
		local parser = LuaFixedParser()
		local success, msg = parser:setData(data, source)
		if not success then
			io.stderr:write('WARNING - failed to parse '..f..': '..msg..'\n')
		else
			local tree = parser.tree
			search(tree)
		end
	end
end

if next(deps) then
	out:insert'deps = {'
	for _,k in ipairs(table.keys(deps):sort()) do
		out:insert('\t'..tolua(k)..',')
	end
	out:insert'}'
end

print(out:concat'\n')
